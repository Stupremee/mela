plugins {
  id 'java-library'
  id 'checkstyle'
  id 'pmd'
  id 'com.github.spotbugs' version '1.7.1'
  id "org.danilopianini.javadoc.io-linker" version "0.1.4-700fdb6"
}

group 'com.github.stupremee.mela'
version '0.1.0'

sourceCompatibility = 11
targetCompatibility = 11

ext {
  logback_version = "1.2.3"
  immutables_version = "2.7.4"
  junit_version = "4.12"
  vavr_version = "0.10.0"
  datastax_version = "3.6.0"
  toml4j_version = "0.7.2"
  d4j_version = "3.0.2"
  jackson_yaml_version = "2.9.8"
  jackson_hocon_version = "1.1.1"
  config_version = "1.3.3"
  lettuce_version = "5.1.6.RELEASE"
  mongodb_version = "1.11.0"
  findbugs_version = "3.0.2"
}

repositories {
  jcenter()
  mavenCentral()
}

dependencies {
  // D4J for wrapping the DiscordAPI
  implementation "com.discord4j:discord4j-core:$d4j_version"

  // Logback as slf4j implementation
  implementation "ch.qos.logback:logback-core:$logback_version"
  implementation "ch.qos.logback:logback-classic:$logback_version"

  // Projectreactor logback addon
  implementation "io.projectreactor.addons:reactor-logback:3.2.2.RELEASE"

  // Jackson yaml dataformat to parse yaml files
  implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_yaml_version"

  // Jackson hocon for parsing hocon files via jackson
  implementation "org.honton.chas.hocon:jackson-dataformat-hocon:$jackson_hocon_version"

  // Config for parsing hocon files
  implementation "com.typesafe:config:$config_version"

  // Vavr for classes like Option, Try and many more useful stuff
  implementation "io.vavr:vavr:$vavr_version"

  // Used to convert futures
  implementation "net.javacrumbs.future-converter:future-converter-java8-guava:1.2.0"

  // Immutables
  implementation "org.immutables:value:$immutables_version"
  annotationProcessor "org.immutables:value:$immutables_version"

  // MongoDB Reactive Streams as MongoDB Driver
  implementation "org.mongodb:mongodb-driver-reactivestreams:$mongodb_version"

  // Lettuce for redis support
  implementation "io.lettuce:lettuce-core:$lettuce_version"

  // Findbugs
  implementation "com.google.code.findbugs:jsr305:$findbugs_version"

  //                                           //
  // ----------- Test Dependencies ----------- //
  //                                           //
  testCompile "junit:junit:$junit_version"
}

sourceSets {
  main.java.srcDirs += 'src/main/java'
  //generated.java.srcDirs += "$buildDir/generated"
}

checkstyle {
  checkstyleTest.enabled = false
  toolVersion = '8.18'
}

checkstyleMain {
  configFile = new File("$rootDir/config/checkstyle/google_checks.xml")
  configProperties = [config_loc: "$projectDir/config/checkstyle"]
}

spotbugs {
  spotbugsTest.enabled = false
  toolVersion = '3.1.12'
  ignoreFailures = true
}

spotbugsMain {
  reports {
    html.enabled = true
    xml.enabled = false
  }
}

pmd {
  pmdTest.enabled = false
}

pmdMain {
  ignoreFailures = true
  ruleSetConfig = project.resources.text.fromFile(file("$projectDir/config/pmd/ruleset.xml"))
}

wrapper {
  gradleVersion = "5.2.1"
  distributionType = Wrapper.DistributionType.ALL
}

javadoc {
  failOnError = false

  exclude "com/github/stupremee/mela/**/Immutable*"

  options {
    memberLevel = JavadocMemberLevel.PUBLIC
    encoding = 'UTF-8'
    addStringOption 'Xdoclint:none', '-quiet'
    addStringOption 'encoding', 'UTF-8'
    links = [
        "https://docs.oracle.com/javase/10/docs/api/",
        "https://docs.oracle.com/en/java/javase/11/docs/api/",
        "https://static.javadoc.io/com.discord4j/discord4j-core/3.0.1",
        "https://static.javadoc.io/io.vavr/vavr/0.10.0/overview-summary.html",
        "http://mongodb.github.io/mongo-java-driver-reactivestreams/1.11/javadoc/",
        "http://mongodb.github.io/mongo-java-driver/3.10/javadoc/",
        "https://projectreactor.io/docs/core/release/api/"
    ]
  }

  setDestinationDir(new File("${buildDir}/docs/"))
}

tasks.withType(JavaCompile) {
  options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/")
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

build {
  dependsOn jar
  dependsOn javadocJar
  dependsOn sourcesJar

  jar.mustRunAfter clean
  javadocJar.mustRunAfter jar
  sourcesJar.mustRunAfter javadocJar
}

compileJava.options.encoding = 'UTF-8'