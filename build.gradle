plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '5.0.0'
  id 'checkstyle'
  id 'pmd'
  id 'com.github.spotbugs' version '1.7.1'
  id "org.danilopianini.javadoc.io-linker" version "0.1.4-700fdb6"
}

group 'com.github.stupremee.mela'
version '0.1.0'

sourceCompatibility = 11
targetCompatibility = 11

ext {
  logback_version = "1.2.3"
  immutables_version = "2.7.4"
  junit_version = "4.12"
  vavr_version = "0.10.0"
  annotations_version = "17.0.0"
  datastax_version = "3.6.0"
  jtoml_version = "1.0.0"
  d4j_version = "3.0.1"
  genson_version = "1.6"
}

repositories {
  jcenter()
  mavenCentral()
}

dependencies {
  // D4J for wrapping the DiscordAPI
  implementation "com.discord4j:discord4j-core:$d4j_version"

  // Genson for Json Parsing
  implementation "com.owlike:genson:$genson_version"

  // Vavr for classes like Option, Try and many more useful stuff
  implementation "io.vavr:vavr:$vavr_version"

  // Cava-Toml to parse Toml files
  implementation "me.grison:jtoml:$jtoml_version"

  // Jetbrains Annotations for better docs
  implementation "org.jetbrains:annotations:$annotations_version"

  // Immutables
  implementation "org.immutables:value:$immutables_version"
  annotationProcessor "org.immutables:value:$immutables_version"

  // Database
  implementation "com.datastax.cassandra:cassandra-driver-core:$datastax_version"
  implementation "com.datastax.cassandra:cassandra-driver-mapping:$datastax_version"
  implementation "com.datastax.cassandra:cassandra-driver-extras:$datastax_version"

  //                                           //
  // ----------- Test Dependencies ----------- //
  //                                           //
  testCompile "junit:junit:$junit_version"
}

sourceSets {
  main.java.srcDirs += 'src/main/java'
}

checkstyle {
  checkstyleTest.enabled = false
  toolVersion = '8.18'
}

checkstyleMain {
  configFile = new File("$rootDir/config/checkstyle/google_checks.xml")
}

spotbugs {
  spotbugsTest.enabled = false
  toolVersion = '3.1.12'
  ignoreFailures = true
}

spotbugsMain {
  reports {
    html.enabled = true
    xml.enabled = false
  }
}

pmd {
  pmdTest.enabled = false
}

pmdMain {
  ignoreFailures = true
  ruleSets = ["category/java/errorprone.xml", "category/java/bestpractices.xml", "category/java/design.xml"]
}

wrapper {
  gradleVersion = "5.2.1"
  distributionType = Wrapper.DistributionType.ALL
}

javadoc {
  failOnError = false

  options {
    memberLevel = JavadocMemberLevel.PUBLIC
    encoding = 'UTF-8'
    addStringOption 'Xdoclint:none', '-quiet'
    addStringOption 'encoding', 'UTF-8'
    links = [
        "https://docs.oracle.com/javase/10/docs/api/",
        "https://docs.oracle.com/en/java/javase/11/docs/api/",
        "https://static.javadoc.io/com.discord4j/discord4j-core/3.0.1",
        "https://static.javadoc.io/doc/io.vavr/vavr/0.10.0",
        "https://docs.datastax.com/en/drivers/java/3.0/",
        "http://genson.io/Documentation/Javadoc/"
    ]
  }

  setDestinationDir(new File("${buildDir}/docs/"))
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

build {
  dependsOn jar
  dependsOn javadocJar
  dependsOn sourcesJar
  dependsOn shadowJar

  jar.mustRunAfter clean
  javadocJar.mustRunAfter jar
  sourcesJar.mustRunAfter javadocJar
  shadowJar.mustRunAfter sourcesJar
}

compileJava.options.encoding = 'UTF-8'